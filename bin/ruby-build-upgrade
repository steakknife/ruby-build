#!/usr/bin/env bash
set -e

if [ -d .git ] || [ -d ../.git ]
then
    export PREFIX="${PREFIX:-/usr/local}" # running from repo copy
else
    export PREFIX="$(dirname $0)" # running from installed copy
fi

BIN_PREFIX="${BIN_PREFIX:-${PREFIX}/bin}"
SHARE_PREFIX="${SHARE_PREFIX:-${PREFIX}/share/ruby-build}"
REPO="${REPO:-git://github.com/sstephenson/ruby-build.git}"
TMP_UPGRADE_DIR=/tmp/ruby-build.upgrade.$$

if [ ! -x "${BIN_PREFIX}/ruby-build" ]
then
    echo ruby-build cannot be upgraded as it is not installed
    echo
    echo https://github.com/sstephenson/ruby-build for more details
    echo
    exit 1
fi


trap 'rm -rf "${TMP_UPGRADE_DIR}" || true' EXIT ERR INT QUIT TERM

rm -rf    "${TMP_UPGRADE_DIR}" || true
mkdir     "${TMP_UPGRADE_DIR}"
git clone "${REPO}" "${TMP_UPGRADE_DIR}"
pushd     "${TMP_UPGRADE_DIR}" >/dev/null 2>&1
NEW_VERSION="`./bin/ruby-build -v 2>&1 | grep ^ruby-build | cut -d' ' -f2`"

if [ x"$NEW_VERSION" = x"" ]
then
    echo "ruby-build cannot be upgraded at this time (1)."
    exit 1
fi

PREVIOUS_VERSION="`${BIN_PREFIX}/ruby-build -v 2>&1 | grep ^ruby-build | cut -d' ' -f2`"

if [ x"$PREVIOUS_VERSION" = x"" ]
then
    echo "ruby-build cannot be upgraded at this time (2)."
    exit 1
fi

if [ x"$PREVIOUS_VERSION" = x"$NEW_VERSION" ]
then
    echo ruby-build is already up-to-date.
    exit
fi

./upgrade.sh
echo ruby-build is now at ${NEW_VERSION}
